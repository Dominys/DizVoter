/*
 * This file is generated by jOOQ.
 */
package io.github.dominys.dizvoter.data.access.impl.jooq.tables;


import io.github.dominys.dizvoter.data.access.impl.jooq.DefaultSchema;
import io.github.dominys.dizvoter.data.access.impl.jooq.Keys;
import io.github.dominys.dizvoter.data.access.impl.jooq.tables.PollVotes.PollVotesPath;
import io.github.dominys.dizvoter.data.access.impl.jooq.tables.Polls.PollsPath;
import io.github.dominys.dizvoter.data.access.impl.jooq.tables.records.PollVoteOptionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PollVoteOptions extends TableImpl<PollVoteOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>poll_vote_options</code>
     */
    public static final PollVoteOptions POLL_VOTE_OPTIONS = new PollVoteOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PollVoteOptionsRecord> getRecordType() {
        return PollVoteOptionsRecord.class;
    }

    /**
     * The column <code>poll_vote_options.id</code>.
     */
    public final TableField<PollVoteOptionsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>poll_vote_options.poll_id</code>.
     */
    public final TableField<PollVoteOptionsRecord, Long> POLL_ID = createField(DSL.name("poll_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>poll_vote_options.name</code>.
     */
    public final TableField<PollVoteOptionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private PollVoteOptions(Name alias, Table<PollVoteOptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PollVoteOptions(Name alias, Table<PollVoteOptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>poll_vote_options</code> table reference
     */
    public PollVoteOptions(String alias) {
        this(DSL.name(alias), POLL_VOTE_OPTIONS);
    }

    /**
     * Create an aliased <code>poll_vote_options</code> table reference
     */
    public PollVoteOptions(Name alias) {
        this(alias, POLL_VOTE_OPTIONS);
    }

    /**
     * Create a <code>poll_vote_options</code> table reference
     */
    public PollVoteOptions() {
        this(DSL.name("poll_vote_options"), null);
    }

    public <O extends Record> PollVoteOptions(Table<O> path, ForeignKey<O, PollVoteOptionsRecord> childPath, InverseForeignKey<O, PollVoteOptionsRecord> parentPath) {
        super(path, childPath, parentPath, POLL_VOTE_OPTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PollVoteOptionsPath extends PollVoteOptions implements Path<PollVoteOptionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PollVoteOptionsPath(Table<O> path, ForeignKey<O, PollVoteOptionsRecord> childPath, InverseForeignKey<O, PollVoteOptionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PollVoteOptionsPath(Name alias, Table<PollVoteOptionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PollVoteOptionsPath as(String alias) {
            return new PollVoteOptionsPath(DSL.name(alias), this);
        }

        @Override
        public PollVoteOptionsPath as(Name alias) {
            return new PollVoteOptionsPath(alias, this);
        }

        @Override
        public PollVoteOptionsPath as(Table<?> alias) {
            return new PollVoteOptionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PollVoteOptionsRecord, Long> getIdentity() {
        return (Identity<PollVoteOptionsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PollVoteOptionsRecord> getPrimaryKey() {
        return Keys.KEY_POLL_VOTE_OPTIONS_PRIMARY;
    }

    @Override
    public List<ForeignKey<PollVoteOptionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OPTIONS_TO_POLL_FK);
    }

    private transient PollsPath _polls;

    /**
     * Get the implicit join path to the <code>dizvoter.polls</code> table.
     */
    public PollsPath polls() {
        if (_polls == null)
            _polls = new PollsPath(this, Keys.OPTIONS_TO_POLL_FK, null);

        return _polls;
    }

    private transient PollVotesPath _pollVotes;

    /**
     * Get the implicit to-many join path to the
     * <code>dizvoter.poll_votes</code> table
     */
    public PollVotesPath pollVotes() {
        if (_pollVotes == null)
            _pollVotes = new PollVotesPath(this, null, Keys.VOTES_TO_OPTIONS_FK.getInverseKey());

        return _pollVotes;
    }

    @Override
    public PollVoteOptions as(String alias) {
        return new PollVoteOptions(DSL.name(alias), this);
    }

    @Override
    public PollVoteOptions as(Name alias) {
        return new PollVoteOptions(alias, this);
    }

    @Override
    public PollVoteOptions as(Table<?> alias) {
        return new PollVoteOptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PollVoteOptions rename(String name) {
        return new PollVoteOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PollVoteOptions rename(Name name) {
        return new PollVoteOptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PollVoteOptions rename(Table<?> name) {
        return new PollVoteOptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVoteOptions where(Condition condition) {
        return new PollVoteOptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVoteOptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVoteOptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVoteOptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVoteOptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVoteOptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVoteOptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVoteOptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVoteOptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVoteOptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
