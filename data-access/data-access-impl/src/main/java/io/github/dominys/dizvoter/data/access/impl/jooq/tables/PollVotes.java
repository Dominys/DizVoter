/*
 * This file is generated by jOOQ.
 */
package io.github.dominys.dizvoter.data.access.impl.jooq.tables;


import io.github.dominys.dizvoter.data.access.impl.jooq.DefaultSchema;
import io.github.dominys.dizvoter.data.access.impl.jooq.Indexes;
import io.github.dominys.dizvoter.data.access.impl.jooq.Keys;
import io.github.dominys.dizvoter.data.access.impl.jooq.tables.PollVoteOptions.PollVoteOptionsPath;
import io.github.dominys.dizvoter.data.access.impl.jooq.tables.records.PollVotesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PollVotes extends TableImpl<PollVotesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>poll_votes</code>
     */
    public static final PollVotes POLL_VOTES = new PollVotes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PollVotesRecord> getRecordType() {
        return PollVotesRecord.class;
    }

    /**
     * The column <code>poll_votes.id</code>.
     */
    public final TableField<PollVotesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>poll_votes.vote_option_id</code>.
     */
    public final TableField<PollVotesRecord, Long> VOTE_OPTION_ID = createField(DSL.name("vote_option_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>poll_votes.user_name</code>.
     */
    public final TableField<PollVotesRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>poll_votes.create_time</code>.
     */
    public final TableField<PollVotesRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private PollVotes(Name alias, Table<PollVotesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PollVotes(Name alias, Table<PollVotesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>poll_votes</code> table reference
     */
    public PollVotes(String alias) {
        this(DSL.name(alias), POLL_VOTES);
    }

    /**
     * Create an aliased <code>poll_votes</code> table reference
     */
    public PollVotes(Name alias) {
        this(alias, POLL_VOTES);
    }

    /**
     * Create a <code>poll_votes</code> table reference
     */
    public PollVotes() {
        this(DSL.name("poll_votes"), null);
    }

    public <O extends Record> PollVotes(Table<O> path, ForeignKey<O, PollVotesRecord> childPath, InverseForeignKey<O, PollVotesRecord> parentPath) {
        super(path, childPath, parentPath, POLL_VOTES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PollVotesPath extends PollVotes implements Path<PollVotesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PollVotesPath(Table<O> path, ForeignKey<O, PollVotesRecord> childPath, InverseForeignKey<O, PollVotesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PollVotesPath(Name alias, Table<PollVotesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PollVotesPath as(String alias) {
            return new PollVotesPath(DSL.name(alias), this);
        }

        @Override
        public PollVotesPath as(Name alias) {
            return new PollVotesPath(alias, this);
        }

        @Override
        public PollVotesPath as(Table<?> alias) {
            return new PollVotesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.POLL_VOTES_POLL_VOTES_CREATE_TIME_IDX);
    }

    @Override
    public Identity<PollVotesRecord, Long> getIdentity() {
        return (Identity<PollVotesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PollVotesRecord> getPrimaryKey() {
        return Keys.KEY_POLL_VOTES_PRIMARY;
    }

    @Override
    public List<ForeignKey<PollVotesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VOTES_TO_OPTIONS_FK);
    }

    private transient PollVoteOptionsPath _pollVoteOptions;

    /**
     * Get the implicit join path to the <code>dizvoter.poll_vote_options</code>
     * table.
     */
    public PollVoteOptionsPath pollVoteOptions() {
        if (_pollVoteOptions == null)
            _pollVoteOptions = new PollVoteOptionsPath(this, Keys.VOTES_TO_OPTIONS_FK, null);

        return _pollVoteOptions;
    }

    @Override
    public PollVotes as(String alias) {
        return new PollVotes(DSL.name(alias), this);
    }

    @Override
    public PollVotes as(Name alias) {
        return new PollVotes(alias, this);
    }

    @Override
    public PollVotes as(Table<?> alias) {
        return new PollVotes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PollVotes rename(String name) {
        return new PollVotes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PollVotes rename(Name name) {
        return new PollVotes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PollVotes rename(Table<?> name) {
        return new PollVotes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVotes where(Condition condition) {
        return new PollVotes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVotes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVotes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVotes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVotes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVotes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVotes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PollVotes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVotes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PollVotes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
